{
  "cacheItemsMap": {
    "3-javascript-string-methods-youll-use-often-and-where-youll-need-them.mdx": {
      "document": {
        "title": "3+ JavaScript String methods you‚Äôll use often and where you‚Äôll need them.",
        "author": "Ammiel Yawson",
        "created_at": "2022-01-24T00:00:00.000Z",
        "primary_tag": "JavaScript",
        "featured": true,
        "feature_image": "/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/featured.webp",
        "tags": [
          "JavaScript",
          "Web Development"
        ],
        "body": {
          "raw": "\nAs a web developer‚Äîfrontend or backend‚Äîstrings make up the most significant portion of the data you deal with commonly.\n\nSometimes, you use the string values as they are. Other times, you need a modified version of the string. Hence, one of the things you do most is String Manipulation.\n\nFrom my own experience, as a frontend developer, there are several string methods that I use most often. I believe these methods would benefit anyone in the field.\n\nWe‚Äôll take a walk through the process of building a search feature on a website. And in the process, highlight these string methods and some situations that call for them.\n\n![Image of Burger Prince Menu](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/burger-prince-menu.png)\n\n## üëë Burger Prince\n\nBurger Prince is a fictional Burger Franchise. They contacted us to add a search feature to their website.\n\nSince this post‚Äôs main aim is string methods, we will not worry about the implementation details.\n\nExtracting just the names from the menu, we get something like this.\n\n```js\nconst mainList = [\n  'Hamburger Gold',\n  'Hamburger Bronze',\n  'Beef Burger',\n  'Turkey Burgey',\n];\n```\n\nTo avoid disrupting other features that rely on the menu list, we will not modify the list directly. However, we will make a new list of the items that match the keywords entered by the user.\n\nTo do that, we‚Äôll go through the list and check if the item contains the keyword(s) entered by the user. If it does, we add it to the new list. We use modern array methods to loop through the list; topic for another time.\n\n![Search bar with hamburger and space](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/search-with-hamburger-and-space.png)\n\n## ü™£ includes()\n\nTo check if an item contains the keyword entered by the user, we use the includes method available on all JavaScript String objects. So the code would look like this;\n\nconst newList = mainList.filter((item) => {\nreturn item.includes(keyword)\n})\n\nAssuming a user enters the string ‚Äú hamburger ‚Äú; how many items do you think will be in the new list?\n\nZERO.\n\nIf you‚Äôre wondering why it‚Äôs not two, I‚Äôll tell you why. Notice the capital ‚ÄúH‚Äù in Hamburger Gold and Hamburger Bronze? The includes method is case sensitive: meaning h is not equal to H.\n\nSo how solve this problem?\n\n## üî§ toLowerCase() and toUpperCase()\n\nYou can compare the all-lowercase version of the item in the main list to the all-lowercase version of the search keyword. The code would now look like this.\n\n```js\nconst newList = mainList.filter((item) => {\n  const itemInLowercase = item.toLowerCase();\n  const keywordInLowercase = keyword.toLowerCase();\n  return itemInLowercase.includes(keywordInLowercase);\n});\n```\n\nHow many items should the new list have if the search keyword remains unchanged?\n\nZERO AGAIN.\n\n## ‚úÇÔ∏è trim()\n\nNotice the spaces between the quotation marks and hamburger in the search value? The menu items contain ‚ÄúHamburger‚Äù with no space before the letter H; Hence, none of the items in the main list match the keyword.\n\n![Search with spaces labelled](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/search-with-spaces-labelled.png)\n\nThe trim method in JavaScript removes white spaces from the beginning and end of a string if any exists.\n\nWe can use the trim method to remove the white spaces from the start and end of the search value. The result would be ‚Äúhamburger‚Äù: with no spaces surrounding it.\n\n```js\nconst newList = mainList.filter((item) => {\n  const itemInLowercase = item.toLowerCase();\n  const keywordInLowercase = keyword.toLowerCase();\n  const trimmedKeyword = keywordInLowercase.trim();\n  return itemInLowercase.includes(trimmedKeyword);\n});\n```\n\nThe keyword now matches two items in the main list: Hamburger Gold and Hamburger Bronze.\n\nThat‚Äôs all for the methods we will use to build the search feature for üëë Burger Prince.\n\n---\n\nTwo other JavaScript string methods that will bring you massive value are the slice and replaceAll methods.\n\n## üç∞ slice(startIndex, [endIndex])\n\nSlice \"extracts a section of a string and returns it as a new string, without modifying the original string.\" - MDN Docs.\n\nIt takes two parameters: startIndex and endIndex (optional).\n\nIt returns a string with characters starting from the startIndex to (but not including) the endIndex. When given only the startIndex, slice returns a string with characters from the startIndex to the end of the string.\n\n![Slice method use with monday](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/slice-monday.png)\n\nFor example, you receive a string: monday. And you would like to capitalize it before displaying it on your website. The code would like this.\n\n```js\nconst word = 'monday';\n\nconst firstLetter = word.slice(0, 1);\nconst restOfWord = word.slice(1);\nconst capitalFirst = firstLetter.toUpperCase();\n\nconst capitalizedWord = capitalFirst + restOfWord;\n```\n\n## üé≠ replaceAll(pattern, replacement)\n\nThe replaceAll method takes two parameters: pattern and replacement. It ‚Äúreturns a new string with all matches of a pattern replaced by a replacement\" - MDN Docs.\n\nA situation where you will need to employ this method is;\n\nYou scraped the price of the F150 Raptor from the Ford website and you need to calculate how much that would be in your local currency. The value you got back is ‚Äú$65,375‚Äù.\n\nYou can use the slice method to get the price without the currency: \"65,375\".\n\nYou will run into a problem when converting this value to a number. There are various ways to convert a string to a number in JavaScript, and this is how they would all fail the task.\n\n![Amount to number](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/amount-to-number.png)\n\nThe issue here is the comma in the string. To solve this issue, we can use the replaceAll method to find and replace all the occurrences of a comma in the value with an empty string.\n\nYou end up with a clean string, ready to be converted; \"65375\". You can use any of the methods above to convert.\n\nThe aim of is this post was to bring these methods to your attention. So if any of them seemed unclear, look them up in the MDN docs for a detailed usage guide.\n\nIf you want to start your journey in web development, stay tuned for more posts. I write about the skills you need to succeed as a web developer.\n\nLet me know your thoughts.\n\nTwitter: [@ammduncan](https://www.twitter.com/ammduncan)\n\nLinkedIn: [Ammiel Yawson](https://www.linkedin.com/in/ammiel-yawson-098902124/)\n",
          "html": "<p>As a web developer‚Äîfrontend or backend‚Äîstrings make up the most significant portion of the data you deal with commonly.</p>\n<p>Sometimes, you use the string values as they are. Other times, you need a modified version of the string. Hence, one of the things you do most is String Manipulation.</p>\n<p>From my own experience, as a frontend developer, there are several string methods that I use most often. I believe these methods would benefit anyone in the field.</p>\n<p>We‚Äôll take a walk through the process of building a search feature on a website. And in the process, highlight these string methods and some situations that call for them.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/burger-prince-menu.png\" alt=\"Image of Burger Prince Menu\"></p>\n<h2>üëë Burger Prince</h2>\n<p>Burger Prince is a fictional Burger Franchise. They contacted us to add a search feature to their website.</p>\n<p>Since this post‚Äôs main aim is string methods, we will not worry about the implementation details.</p>\n<p>Extracting just the names from the menu, we get something like this.</p>\n<pre><code class=\"language-js\">const mainList = [\n  'Hamburger Gold',\n  'Hamburger Bronze',\n  'Beef Burger',\n  'Turkey Burgey',\n];\n</code></pre>\n<p>To avoid disrupting other features that rely on the menu list, we will not modify the list directly. However, we will make a new list of the items that match the keywords entered by the user.</p>\n<p>To do that, we‚Äôll go through the list and check if the item contains the keyword(s) entered by the user. If it does, we add it to the new list. We use modern array methods to loop through the list; topic for another time.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/search-with-hamburger-and-space.png\" alt=\"Search bar with hamburger and space\"></p>\n<h2>ü™£ includes()</h2>\n<p>To check if an item contains the keyword entered by the user, we use the includes method available on all JavaScript String objects. So the code would look like this;</p>\n<p>const newList = mainList.filter((item) => {\nreturn item.includes(keyword)\n})</p>\n<p>Assuming a user enters the string ‚Äú hamburger ‚Äú; how many items do you think will be in the new list?</p>\n<p>ZERO.</p>\n<p>If you‚Äôre wondering why it‚Äôs not two, I‚Äôll tell you why. Notice the capital ‚ÄúH‚Äù in Hamburger Gold and Hamburger Bronze? The includes method is case sensitive: meaning h is not equal to H.</p>\n<p>So how solve this problem?</p>\n<h2>üî§ toLowerCase() and toUpperCase()</h2>\n<p>You can compare the all-lowercase version of the item in the main list to the all-lowercase version of the search keyword. The code would now look like this.</p>\n<pre><code class=\"language-js\">const newList = mainList.filter((item) => {\n  const itemInLowercase = item.toLowerCase();\n  const keywordInLowercase = keyword.toLowerCase();\n  return itemInLowercase.includes(keywordInLowercase);\n});\n</code></pre>\n<p>How many items should the new list have if the search keyword remains unchanged?</p>\n<p>ZERO AGAIN.</p>\n<h2>‚úÇÔ∏è trim()</h2>\n<p>Notice the spaces between the quotation marks and hamburger in the search value? The menu items contain ‚ÄúHamburger‚Äù with no space before the letter H; Hence, none of the items in the main list match the keyword.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/search-with-spaces-labelled.png\" alt=\"Search with spaces labelled\"></p>\n<p>The trim method in JavaScript removes white spaces from the beginning and end of a string if any exists.</p>\n<p>We can use the trim method to remove the white spaces from the start and end of the search value. The result would be ‚Äúhamburger‚Äù: with no spaces surrounding it.</p>\n<pre><code class=\"language-js\">const newList = mainList.filter((item) => {\n  const itemInLowercase = item.toLowerCase();\n  const keywordInLowercase = keyword.toLowerCase();\n  const trimmedKeyword = keywordInLowercase.trim();\n  return itemInLowercase.includes(trimmedKeyword);\n});\n</code></pre>\n<p>The keyword now matches two items in the main list: Hamburger Gold and Hamburger Bronze.</p>\n<p>That‚Äôs all for the methods we will use to build the search feature for üëë Burger Prince.</p>\n<hr>\n<p>Two other JavaScript string methods that will bring you massive value are the slice and replaceAll methods.</p>\n<h2>üç∞ slice(startIndex, [endIndex])</h2>\n<p>Slice \"extracts a section of a string and returns it as a new string, without modifying the original string.\" - MDN Docs.</p>\n<p>It takes two parameters: startIndex and endIndex (optional).</p>\n<p>It returns a string with characters starting from the startIndex to (but not including) the endIndex. When given only the startIndex, slice returns a string with characters from the startIndex to the end of the string.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/slice-monday.png\" alt=\"Slice method use with monday\"></p>\n<p>For example, you receive a string: monday. And you would like to capitalize it before displaying it on your website. The code would like this.</p>\n<pre><code class=\"language-js\">const word = 'monday';\n\nconst firstLetter = word.slice(0, 1);\nconst restOfWord = word.slice(1);\nconst capitalFirst = firstLetter.toUpperCase();\n\nconst capitalizedWord = capitalFirst + restOfWord;\n</code></pre>\n<h2>üé≠ replaceAll(pattern, replacement)</h2>\n<p>The replaceAll method takes two parameters: pattern and replacement. It ‚Äúreturns a new string with all matches of a pattern replaced by a replacement\" - MDN Docs.</p>\n<p>A situation where you will need to employ this method is;</p>\n<p>You scraped the price of the F150 Raptor from the Ford website and you need to calculate how much that would be in your local currency. The value you got back is ‚Äú$65,375‚Äù.</p>\n<p>You can use the slice method to get the price without the currency: \"65,375\".</p>\n<p>You will run into a problem when converting this value to a number. There are various ways to convert a string to a number in JavaScript, and this is how they would all fail the task.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/amount-to-number.png\" alt=\"Amount to number\"></p>\n<p>The issue here is the comma in the string. To solve this issue, we can use the replaceAll method to find and replace all the occurrences of a comma in the value with an empty string.</p>\n<p>You end up with a clean string, ready to be converted; \"65375\". You can use any of the methods above to convert.</p>\n<p>The aim of is this post was to bring these methods to your attention. So if any of them seemed unclear, look them up in the MDN docs for a detailed usage guide.</p>\n<p>If you want to start your journey in web development, stay tuned for more posts. I write about the skills you need to succeed as a web developer.</p>\n<p>Let me know your thoughts.</p>\n<p>Twitter: <a href=\"https://www.twitter.com/ammduncan\">@ammduncan</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/ammiel-yawson-098902124/\">Ammiel Yawson</a></p>"
        },
        "_id": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them.mdx",
        "_raw": {
          "sourceFilePath": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them.mdx",
          "sourceFileName": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them"
        },
        "type": "Post",
        "slug": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them",
        "reading_time": 5
      },
      "documentHash": "1745781036518",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling.mdx": {
      "document": {
        "title": "Provide / Inject - How to drill props in Vue without actually prop drilling",
        "author": "Ammiel Yawson",
        "created_at": "2022-09-22T00:00:00.000Z",
        "primary_tag": "Vue",
        "featured": true,
        "feature_image": "/images/provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling/featured.webp",
        "tags": [
          "Vue",
          "Web Development"
        ],
        "body": {
          "raw": "\n## What is prop drilling?\n\nProp drilling is a term used in component-driven frontend development where a parent component sends props through child components that have no use for the props except to pass them down to be used by a deeply nested component.\n\n## Example\n\nYou‚Äôre building a Vue web application where the buttons have a blue background and white colored text. There‚Äôs one exception though. The button has a red background when used anywhere inside a modal.\n\n![Labelled Illustration](/images/provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling/labelled-illustration.png)\n\nTo know when to change the color to red, the Button takes a prop, `inModal`; a boolean value.\n\n```js\n// ButtonComponent.vue\nexport default {\n\t// ...\n\tprops: [ \"inModal\" ]\n}\n\n```\n\nTo pass the prop to the button in the Modal, we need to pass the prop to the Card component first. Which then passes the prop to the Button.\n\nNow, for a two-step drill like this, there‚Äôs no pain in drilling the prop. Imagine the Card component was nested in other components inside the Modal component; `CardListComponent`  ‚Üí `CartContentComponent` ‚Üí `CartComponent`, etc. Then passing the inModal props through each of these in-between components would be a pain.\n\nTo battle the need to pass the props through components that have no use for them, Vue provides the Provide / Inject feature. It involves a parent component exposing labeled values, and making them accessible to every child, grandchild, or even great-grandchild component.\n\nHere‚Äôs how you can use the Provide / Inject feature to eliminate prop drilling in our example.\n\n```js\n// ModalComponent.vue\nexport default {\n\t// ...\n\tprovide: { inModal: true }\n}\n```\n\n```js\n// ButtonComponent.vue\nexport default {\n\t// ...\n\tinject: [ \"inModal\" ]\n}\n```\n\nSo the ModalComponent says, assign the value true to the label inModal and make it available to all descendants. The ButtonComponent says, inject whatever value my ancestors labeled inModal.\n\nIf no ancestor of Button provides a value with the label inModal, you‚Äôll see a warning in your console.\n\n```text\n[Vue warn]: injection \"inModal\" not found.\n```\n\n## [Optional] Alternate Provide Syntax\nWhen provide is set to an object, you can provide only static values to the nested components. However, you write provide as a method that returns an object when you need to make a reactive value available. In the method, you can access the this keyword; assuming you‚Äôre using the options API.\n\nProvide / Inject can help you avoid prop drilling and write cleaner component compositions as a result. You can check the [official docs](https://vuejs.org/guide/components/provide-inject.html#prop-drilling) for more information or clarification if you need any.",
          "html": "<h2>What is prop drilling?</h2>\n<p>Prop drilling is a term used in component-driven frontend development where a parent component sends props through child components that have no use for the props except to pass them down to be used by a deeply nested component.</p>\n<h2>Example</h2>\n<p>You‚Äôre building a Vue web application where the buttons have a blue background and white colored text. There‚Äôs one exception though. The button has a red background when used anywhere inside a modal.</p>\n<p><img src=\"/images/provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling/labelled-illustration.png\" alt=\"Labelled Illustration\"></p>\n<p>To know when to change the color to red, the Button takes a prop, <code>inModal</code>; a boolean value.</p>\n<pre><code class=\"language-js\">// ButtonComponent.vue\nexport default {\n\t// ...\n\tprops: [ \"inModal\" ]\n}\n\n</code></pre>\n<p>To pass the prop to the button in the Modal, we need to pass the prop to the Card component first. Which then passes the prop to the Button.</p>\n<p>Now, for a two-step drill like this, there‚Äôs no pain in drilling the prop. Imagine the Card component was nested in other components inside the Modal component; <code>CardListComponent</code>  ‚Üí <code>CartContentComponent</code> ‚Üí <code>CartComponent</code>, etc. Then passing the inModal props through each of these in-between components would be a pain.</p>\n<p>To battle the need to pass the props through components that have no use for them, Vue provides the Provide / Inject feature. It involves a parent component exposing labeled values, and making them accessible to every child, grandchild, or even great-grandchild component.</p>\n<p>Here‚Äôs how you can use the Provide / Inject feature to eliminate prop drilling in our example.</p>\n<pre><code class=\"language-js\">// ModalComponent.vue\nexport default {\n\t// ...\n\tprovide: { inModal: true }\n}\n</code></pre>\n<pre><code class=\"language-js\">// ButtonComponent.vue\nexport default {\n\t// ...\n\tinject: [ \"inModal\" ]\n}\n</code></pre>\n<p>So the ModalComponent says, assign the value true to the label inModal and make it available to all descendants. The ButtonComponent says, inject whatever value my ancestors labeled inModal.</p>\n<p>If no ancestor of Button provides a value with the label inModal, you‚Äôll see a warning in your console.</p>\n<pre><code class=\"language-text\">[Vue warn]: injection \"inModal\" not found.\n</code></pre>\n<h2>[Optional] Alternate Provide Syntax</h2>\n<p>When provide is set to an object, you can provide only static values to the nested components. However, you write provide as a method that returns an object when you need to make a reactive value available. In the method, you can access the this keyword; assuming you‚Äôre using the options API.</p>\n<p>Provide / Inject can help you avoid prop drilling and write cleaner component compositions as a result. You can check the <a href=\"https://vuejs.org/guide/components/provide-inject.html#prop-drilling\">official docs</a> for more information or clarification if you need any.</p>"
        },
        "_id": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling.mdx",
        "_raw": {
          "sourceFilePath": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling.mdx",
          "sourceFileName": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling"
        },
        "type": "Post",
        "slug": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling",
        "reading_time": 2
      },
      "documentHash": "1729629459663",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "recipe-for-an-effective-website.mdx": {
      "document": {
        "title": "Recipe for an Effective Marketing Website / Landing Page",
        "author": "Ammiel Yawson",
        "created_at": "2022-08-16T00:00:00.000Z",
        "primary_tag": "Web Design",
        "featured": true,
        "feature_image": "/images/recipe-for-an-effective-website/featured.webp",
        "tags": [
          "Web Design"
        ],
        "body": {
          "raw": "\nA website is a tool meant to serve you and will do just that if built with a goal. When getting a website, have a target that the website can help you achieve. Do not get one only because competitors have some.\n\nBuilding a website is like getting an office space. You consider the location, how accessible it is to your target audience, does the appearance align with the nature of your audience? and a lot of other viable considerations.\n\nA clear purpose is only the first requirement of an effective website. You need one more ingredient to be able to maximize the benefits you reap from a website.\n\n## Clear Purpose + ??? = Working Content\n\nYou are browsing the web, looking for a hair product. You come across two brands that sell hair products; you have never heard of either. You decide to check out their websites.\n\n![Brand A vs Brand B](/images/recipe-for-an-effective-website/brands.png)\n\n- Brand A shows testimonials of past users' sentiments on their products.\n- Brand B, however, features our team section but not a testimonial section.\n\nBetween a testimonial section and our team section, which do you think is a trust-building component on a website?\n\nüëÄ\n\nThe answer is both.\n\nA testimonial section shows a user (usually positive) feedback from other people who have used your product/service. A testimonial helps build trust for almost any type of business you can think of.\n\nOur team section favors service-oriented businesses more. It builds trust by putting faces to your service which makes it easier for people to connect with.\n\nAlthough both elements help build trust with visitors, I‚Äôm guessing you care more about what other users say about the hair product than who made the product‚Äîunless they are family or friends.\n\nBrand B chose the right element for the purpose, but not necessarily the best for the product. Brand A‚Äôs testimonial section, however, reduces the level of risk you are about to take. Others have used it and are okay. You can probably use it too.\n\nüí≠ CLEAR PURPOSE + STRATEGY = WORKING CONTENT\n\nAs a business, brand, or individual thinking about getting a website, it is your job to know why you want it. However, the strategy is the responsibility of whom you choose to help you achieve your WHY; designer, developer, or agency.\n\nA clear strategy will help you know what information to gather for the website.\n",
          "html": "<p>A website is a tool meant to serve you and will do just that if built with a goal. When getting a website, have a target that the website can help you achieve. Do not get one only because competitors have some.</p>\n<p>Building a website is like getting an office space. You consider the location, how accessible it is to your target audience, does the appearance align with the nature of your audience? and a lot of other viable considerations.</p>\n<p>A clear purpose is only the first requirement of an effective website. You need one more ingredient to be able to maximize the benefits you reap from a website.</p>\n<h2>Clear Purpose + ??? = Working Content</h2>\n<p>You are browsing the web, looking for a hair product. You come across two brands that sell hair products; you have never heard of either. You decide to check out their websites.</p>\n<p><img src=\"/images/recipe-for-an-effective-website/brands.png\" alt=\"Brand A vs Brand B\"></p>\n<ul>\n<li>Brand A shows testimonials of past users' sentiments on their products.</li>\n<li>Brand B, however, features our team section but not a testimonial section.</li>\n</ul>\n<p>Between a testimonial section and our team section, which do you think is a trust-building component on a website?</p>\n<p>üëÄ</p>\n<p>The answer is both.</p>\n<p>A testimonial section shows a user (usually positive) feedback from other people who have used your product/service. A testimonial helps build trust for almost any type of business you can think of.</p>\n<p>Our team section favors service-oriented businesses more. It builds trust by putting faces to your service which makes it easier for people to connect with.</p>\n<p>Although both elements help build trust with visitors, I‚Äôm guessing you care more about what other users say about the hair product than who made the product‚Äîunless they are family or friends.</p>\n<p>Brand B chose the right element for the purpose, but not necessarily the best for the product. Brand A‚Äôs testimonial section, however, reduces the level of risk you are about to take. Others have used it and are okay. You can probably use it too.</p>\n<p>üí≠ CLEAR PURPOSE + STRATEGY = WORKING CONTENT</p>\n<p>As a business, brand, or individual thinking about getting a website, it is your job to know why you want it. However, the strategy is the responsibility of whom you choose to help you achieve your WHY; designer, developer, or agency.</p>\n<p>A clear strategy will help you know what information to gather for the website.</p>"
        },
        "_id": "recipe-for-an-effective-website.mdx",
        "_raw": {
          "sourceFilePath": "recipe-for-an-effective-website.mdx",
          "sourceFileName": "recipe-for-an-effective-website.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "recipe-for-an-effective-website"
        },
        "type": "Post",
        "slug": "recipe-for-an-effective-website",
        "reading_time": 2
      },
      "documentHash": "1745876834984",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "stop-using-useeffect-for-everything-try-lazy-effects-instead.mdx": {
      "document": {
        "title": "Stop Using useEffect for Everything (Try Lazy Effects Instead)",
        "author": "Ammiel Yawson",
        "created_at": "2025-06-24T09:00:00.000Z",
        "primary_tag": "React",
        "featured": true,
        "feature_image": "/images/stop-using-useeffect-for-everything-try-lazy-effects-instead/featured.webp",
        "feature_dark_mode_image": "/images/stop-using-useeffect-for-everything-try-lazy-effects-instead/featured-dark.webp",
        "tags": [
          "React",
          "Vue"
        ],
        "body": {
          "raw": "\nThe best code tells a clear story: user acts ‚Üí handler responds.\n\nuseEffect can break this story by separating effects from their actions, removing the direct link between user interactions and their responses. While it's the most common way we're taught to handle side effects in React, not all effects benefit from automatic execution.\n\nWhen the useEffect hook is overused, it can lead to cognitive load when looking to link effects to their causing actions.\n\nAs a developer, a huge part of your work is reading code to understand and either extend functionality or fix bugs. Hence, you always want to lean on decisions that lead to clearer code.\n\nIn the case of effects, lazy effects (sometimes known event-driven effects) are how you make sure you keep a direct link between your actions and their effects.\n\n<aside>\nüí°\n\nLazy effects are side effects called in response to user events/actions. They're \"lazy\" because they wait until manually called, and \"event-driven\" because they respond to user interactions.\n\n</aside>\n\n## Let‚Äôs look at examples:\n\nSearch example\n\n```tsx\n// ‚ùå Reactive useEffect\nuseEffect(() => {\n  if (searchTerm.length > 2) {\n    searchUsers(searchTerm);\n  }\n}, [searchTerm]);\n\n// ‚úÖ Lazy event-driven\nconst handleSearch = (term) => {\n  setSearchTerm(term);\n  if (term.length > 2) {\n    searchUsers(term);\n  }\n};\n```\n\n_The `searchUsers` function is clearly called inside `handleSearch`,\nestablishing a direct relation between when search handler\nand the search users effect._\n\n---\n\nModal example\n\n```tsx\n// ‚ùå Reactive\nuseEffect(() => {\n  if (isModalOpen) {\n    trackModalView('user-profile');\n  }\n}, [isModalOpen]);\n\n// ‚úÖ Lazy\nconst openModal = () => {\n  setIsModalOpen(true);\n  trackModalView('user-profile');\n};\n```\n\n_Same as in the search example, There's a direct link between `openModal` handler and `trackModalView` effect._\n\n## How do you decide when to use lazy effects over useEffect?\n\nThe simple question to ask is: does it occur in response to a user action? If yes, then you mostly want to go with event driven effects.\nIf not, then useEffect is probably the right choice for reactive updates like data syncing or cleanup operations.\n",
          "html": "<p>The best code tells a clear story: user acts ‚Üí handler responds.</p>\n<p>useEffect can break this story by separating effects from their actions, removing the direct link between user interactions and their responses. While it's the most common way we're taught to handle side effects in React, not all effects benefit from automatic execution.</p>\n<p>When the useEffect hook is overused, it can lead to cognitive load when looking to link effects to their causing actions.</p>\n<p>As a developer, a huge part of your work is reading code to understand and either extend functionality or fix bugs. Hence, you always want to lean on decisions that lead to clearer code.</p>\n<p>In the case of effects, lazy effects (sometimes known event-driven effects) are how you make sure you keep a direct link between your actions and their effects.</p>\n<p>Lazy effects are side effects called in response to user events/actions. They're \"lazy\" because they wait until manually called, and \"event-driven\" because they respond to user interactions.</p>\n<h2>Let‚Äôs look at examples:</h2>\n<p>Search example</p>\n<pre><code class=\"language-tsx\">// ‚ùå Reactive useEffect\nuseEffect(() => {\n  if (searchTerm.length > 2) {\n    searchUsers(searchTerm);\n  }\n}, [searchTerm]);\n\n// ‚úÖ Lazy event-driven\nconst handleSearch = (term) => {\n  setSearchTerm(term);\n  if (term.length > 2) {\n    searchUsers(term);\n  }\n};\n</code></pre>\n<p><em>The <code>searchUsers</code> function is clearly called inside <code>handleSearch</code>,\nestablishing a direct relation between when search handler\nand the search users effect.</em></p>\n<hr>\n<p>Modal example</p>\n<pre><code class=\"language-tsx\">// ‚ùå Reactive\nuseEffect(() => {\n  if (isModalOpen) {\n    trackModalView('user-profile');\n  }\n}, [isModalOpen]);\n\n// ‚úÖ Lazy\nconst openModal = () => {\n  setIsModalOpen(true);\n  trackModalView('user-profile');\n};\n</code></pre>\n<p><em>Same as in the search example, There's a direct link between <code>openModal</code> handler and <code>trackModalView</code> effect.</em></p>\n<h2>How do you decide when to use lazy effects over useEffect?</h2>\n<p>The simple question to ask is: does it occur in response to a user action? If yes, then you mostly want to go with event driven effects.\nIf not, then useEffect is probably the right choice for reactive updates like data syncing or cleanup operations.</p>"
        },
        "_id": "stop-using-useeffect-for-everything-try-lazy-effects-instead.mdx",
        "_raw": {
          "sourceFilePath": "stop-using-useeffect-for-everything-try-lazy-effects-instead.mdx",
          "sourceFileName": "stop-using-useeffect-for-everything-try-lazy-effects-instead.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "stop-using-useeffect-for-everything-try-lazy-effects-instead"
        },
        "type": "Post",
        "slug": "stop-using-useeffect-for-everything-try-lazy-effects-instead",
        "reading_time": 2
      },
      "documentHash": "1750729200354",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "the-css-box-model-the-foundation-of-layouts-on-the-web.mdx": {
      "document": {
        "title": "The CSS Box model. The foundation of layouts on the web.",
        "author": "Ammiel Yawson",
        "created_at": "2022-02-15T00:00:00.000Z",
        "primary_tag": "CSS",
        "featured": true,
        "feature_image": "/images/the-css-box-model-the-foundation-of-layouts-on-the-web/featured.webp",
        "tags": [
          "CSS",
          "Web Development"
        ],
        "body": {
          "raw": "Depending on your level of experience in web development, you may or may not have heard about the Box Model. It is a fundamental concept in CSS that will shape how you use CSS to build layouts.\n\nWe‚Äôll illustrate this model with a relatable situation.\n\nYour sister‚Äôs birthday is next Saturday. You plan on getting her the iPhone 13 you know she so wants. However, you want it to be a surprise. So after buying the phone, you take it out of its box and put it into a bigger one; you don‚Äôt want her to guess your gift right away.\n\nThere is one problem. The screen might break if you allow the phone to wobble about in the box; or if someone drops it. So you put some stuffing around the phone in the box to soften the blow if it falls.\n\nYou bring your gift to where all the others are. But you don‚Äôt want yours to blend in with the others. So you put some distance between yours and the others.\n\nNow back to CSS.\n\n![Box Model](/images/the-css-box-model-the-foundation-of-layouts-on-the-web/box-model.png)\n\nThe main idea of the Box Model is that every element on an HTML page is a boxüéÅ. Where depending on how fragile the item is, you put a lot of stuffing (padding) around it or no stuffing at all. And depending on how much you want it to stand out, you put some distance between your gift and others around it.\n\nIn CSS,\n\n- The content of an element is the item inside the box.\n- The padding of an element is the stuffing around the item.\n- The border is the walls of the gift box.\n- The margin is the space between the gift box and other gifts boxes.\n\nThat‚Äôs it. That‚Äôs the CSS box model.\n\nLet me know your thoughts.\n\nTwitter: [@ammduncan](https://www.twitter.com/ammduncan)\n\nLinkedIn: [Ammiel Yawson](https://www.linkedin.com/in/ammiel-yawson-098902124/)",
          "html": "<p>Depending on your level of experience in web development, you may or may not have heard about the Box Model. It is a fundamental concept in CSS that will shape how you use CSS to build layouts.</p>\n<p>We‚Äôll illustrate this model with a relatable situation.</p>\n<p>Your sister‚Äôs birthday is next Saturday. You plan on getting her the iPhone 13 you know she so wants. However, you want it to be a surprise. So after buying the phone, you take it out of its box and put it into a bigger one; you don‚Äôt want her to guess your gift right away.</p>\n<p>There is one problem. The screen might break if you allow the phone to wobble about in the box; or if someone drops it. So you put some stuffing around the phone in the box to soften the blow if it falls.</p>\n<p>You bring your gift to where all the others are. But you don‚Äôt want yours to blend in with the others. So you put some distance between yours and the others.</p>\n<p>Now back to CSS.</p>\n<p><img src=\"/images/the-css-box-model-the-foundation-of-layouts-on-the-web/box-model.png\" alt=\"Box Model\"></p>\n<p>The main idea of the Box Model is that every element on an HTML page is a boxüéÅ. Where depending on how fragile the item is, you put a lot of stuffing (padding) around it or no stuffing at all. And depending on how much you want it to stand out, you put some distance between your gift and others around it.</p>\n<p>In CSS,</p>\n<ul>\n<li>The content of an element is the item inside the box.</li>\n<li>The padding of an element is the stuffing around the item.</li>\n<li>The border is the walls of the gift box.</li>\n<li>The margin is the space between the gift box and other gifts boxes.</li>\n</ul>\n<p>That‚Äôs it. That‚Äôs the CSS box model.</p>\n<p>Let me know your thoughts.</p>\n<p>Twitter: <a href=\"https://www.twitter.com/ammduncan\">@ammduncan</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/ammiel-yawson-098902124/\">Ammiel Yawson</a></p>"
        },
        "_id": "the-css-box-model-the-foundation-of-layouts-on-the-web.mdx",
        "_raw": {
          "sourceFilePath": "the-css-box-model-the-foundation-of-layouts-on-the-web.mdx",
          "sourceFileName": "the-css-box-model-the-foundation-of-layouts-on-the-web.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "the-css-box-model-the-foundation-of-layouts-on-the-web"
        },
        "type": "Post",
        "slug": "the-css-box-model-the-foundation-of-layouts-on-the-web",
        "reading_time": 2
      },
      "documentHash": "1729629459663",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "the-pagination-bug-hiding-in-plain-sight.mdx": {
      "document": {
        "title": "The Pagination Bug That‚Äôs Hiding in Plain Sight",
        "author": "Ammiel Yawson",
        "created_at": "2025-06-17T09:00:00.000Z",
        "primary_tag": "Web Development",
        "featured": true,
        "feature_image": "/images/the-pagination-bug-hiding-in-plain-sight/featured.webp",
        "tags": [
          "Web Development",
          "React",
          "Vue"
        ],
        "body": {
          "raw": "\nAs a front-end developer, pagination is a common feature you'll work on. It usually involves a list of data, some filters, and finally, the pagination control.\n\nBut there's a simple, common gotcha that you might be hiding in your application: not resetting the page back to 1 when any filter changes.\n\n### The problem:\n\nImagine you're on page 4 of a user list page. You've still not found the user you're looking for, but you do know their first name: Fred.\n\nYou type in \"Fred\", but then you get no results found. However, you're sure you saw Fred in the user list just yesterday.\n\nAs a developer yourself, you decide to investigate this issue. You notice the query sent to the backend looks like this:\n\n```tsx\n{\n  \"keyword\": \"Fred\",\n  \"page\": 4\n}\n```\n\nNow you wonder, what about page 1? Right. You would have to manually change the page number to 1 to determine if there's actually no user called \"Fred\".\n\nWith your frontend knowledge, you were able to catch this. You checked the network when you didn't get the results you were expecting.\n\nWill your non-dev user have the urge to check the network? I'm guessing not. That means you end up misleading your users.\n\nTo fix this, always reset the page query to 1 whenever other queries are changed.\n\nHere are implementations in both React and Vue that I have used in the past to avoid this bug:\n\n### React\n\n````tsx\nimport { useCallback, useReducer } from 'react';\n\ntype QueryObject = Record<string, string | number>;\n\nfunction spreadReducer<\n  TState extends QueryObject,\n  TAction extends Partial<TState>,\n>(state: TState, action: TAction) {\n  return {\n    ...state,\n    ...action,\n  };\n}\n\n/**\n * Hook to manage a query object. Automatically reset to page `1` when other\n * query keys are changed\n *\n * @param initialQueryState - initial state of your query\n * @returns an object containing the query object and the function to update the object\n *\n * @example\n * ```\n * function SomePageComponent() {\n *   const { query, updateQuery } = usePageResetQuery({ keyword: '', page: 1, pageSize: 10 })\n *   const handleSearchChange = (searchValue) => updateQuery({ keyword: searchValue })\n *   return (\n *     <div>\n *       <input type=\"search\" onChange={(e) => handleSearchChange(e.target.value)} />\n *       {/* ... *\\/}\n *     </div>\n *   )\n * }\n * ```\n */\nexport function usePageResetQuery<T extends QueryObject>(initialQueryState: T) {\n  const [query, updateQuery] = useReducer(\n    spreadReducer,\n    null,\n    () => initialQueryState\n  );\n\n  const modifiedUpdateQuery: typeof updateQuery = useCallback((action) => {\n    if ('page' in action) {\n      updateQuery(action);\n    } else {\n      updateQuery({\n        ...action,\n        page: 1,\n      });\n    }\n  }, []);\n\n  return {\n    query,\n    updateQuery: modifiedUpdateQuery,\n  };\n}\n````\n\n### Vue\n\n```tsx\nimport { reactive, computed } from 'vue';\n\ntype QueryObject = Record<string, string | number>;\n\nexport function usePageResetQuery<T extends QueryObject>(initialQueryState: T) {\n  const query = reactive({ ...initialQueryState });\n\n  const updateQuery = (updates: Partial<T>) => {\n    if ('page' in updates) {\n      Object.assign(query, updates);\n    } else {\n      Object.assign(query, { ...updates, page: 1 });\n    }\n  };\n\n  return {\n    query: computed(() => query),\n    updateQuery,\n  };\n}\n```\n",
          "html": "<p>As a front-end developer, pagination is a common feature you'll work on. It usually involves a list of data, some filters, and finally, the pagination control.</p>\n<p>But there's a simple, common gotcha that you might be hiding in your application: not resetting the page back to 1 when any filter changes.</p>\n<h3>The problem:</h3>\n<p>Imagine you're on page 4 of a user list page. You've still not found the user you're looking for, but you do know their first name: Fred.</p>\n<p>You type in \"Fred\", but then you get no results found. However, you're sure you saw Fred in the user list just yesterday.</p>\n<p>As a developer yourself, you decide to investigate this issue. You notice the query sent to the backend looks like this:</p>\n<pre><code class=\"language-tsx\">{\n  \"keyword\": \"Fred\",\n  \"page\": 4\n}\n</code></pre>\n<p>Now you wonder, what about page 1? Right. You would have to manually change the page number to 1 to determine if there's actually no user called \"Fred\".</p>\n<p>With your frontend knowledge, you were able to catch this. You checked the network when you didn't get the results you were expecting.</p>\n<p>Will your non-dev user have the urge to check the network? I'm guessing not. That means you end up misleading your users.</p>\n<p>To fix this, always reset the page query to 1 whenever other queries are changed.</p>\n<p>Here are implementations in both React and Vue that I have used in the past to avoid this bug:</p>\n<h3>React</h3>\n<pre><code class=\"language-tsx\">import { useCallback, useReducer } from 'react';\n\ntype QueryObject = Record&#x3C;string, string | number>;\n\nfunction spreadReducer&#x3C;\n  TState extends QueryObject,\n  TAction extends Partial&#x3C;TState>,\n>(state: TState, action: TAction) {\n  return {\n    ...state,\n    ...action,\n  };\n}\n\n/**\n * Hook to manage a query object. Automatically reset to page `1` when other\n * query keys are changed\n *\n * @param initialQueryState - initial state of your query\n * @returns an object containing the query object and the function to update the object\n *\n * @example\n * ```\n * function SomePageComponent() {\n *   const { query, updateQuery } = usePageResetQuery({ keyword: '', page: 1, pageSize: 10 })\n *   const handleSearchChange = (searchValue) => updateQuery({ keyword: searchValue })\n *   return (\n *     &#x3C;div>\n *       &#x3C;input type=\"search\" onChange={(e) => handleSearchChange(e.target.value)} />\n *       {/* ... *\\/}\n *     &#x3C;/div>\n *   )\n * }\n * ```\n */\nexport function usePageResetQuery&#x3C;T extends QueryObject>(initialQueryState: T) {\n  const [query, updateQuery] = useReducer(\n    spreadReducer,\n    null,\n    () => initialQueryState\n  );\n\n  const modifiedUpdateQuery: typeof updateQuery = useCallback((action) => {\n    if ('page' in action) {\n      updateQuery(action);\n    } else {\n      updateQuery({\n        ...action,\n        page: 1,\n      });\n    }\n  }, []);\n\n  return {\n    query,\n    updateQuery: modifiedUpdateQuery,\n  };\n}\n</code></pre>\n<h3>Vue</h3>\n<pre><code class=\"language-tsx\">import { reactive, computed } from 'vue';\n\ntype QueryObject = Record&#x3C;string, string | number>;\n\nexport function usePageResetQuery&#x3C;T extends QueryObject>(initialQueryState: T) {\n  const query = reactive({ ...initialQueryState });\n\n  const updateQuery = (updates: Partial&#x3C;T>) => {\n    if ('page' in updates) {\n      Object.assign(query, updates);\n    } else {\n      Object.assign(query, { ...updates, page: 1 });\n    }\n  };\n\n  return {\n    query: computed(() => query),\n    updateQuery,\n  };\n}\n</code></pre>"
        },
        "_id": "the-pagination-bug-hiding-in-plain-sight.mdx",
        "_raw": {
          "sourceFilePath": "the-pagination-bug-hiding-in-plain-sight.mdx",
          "sourceFileName": "the-pagination-bug-hiding-in-plain-sight.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "the-pagination-bug-hiding-in-plain-sight"
        },
        "type": "Post",
        "slug": "the-pagination-bug-hiding-in-plain-sight",
        "reading_time": 3
      },
      "documentHash": "1750118016231",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "web-development-your-friendly-entry-to-the-tech-community-in-2022.mdx": {
      "document": {
        "title": "Web development: your friendly entry to the tech community in 2022.",
        "author": "Ammiel Yawson",
        "created_at": "2022-01-17T00:00:00.000Z",
        "primary_tag": "Web Development",
        "featured": true,
        "feature_image": "/images/web-development-your-friendly-entry-to-the-tech-community-in-2022/featured.webp",
        "tags": [
          "Web Development"
        ],
        "body": {
          "raw": "\nThe tech field encompasses more than just software development. And there‚Äôs more to software development than web development. But why is everyone trying to teach you how to get into web development?\n\nIf you‚Äôve paid the slightest attention to online tech communities, you would have noticed the trend of people sharing resources on how to get into web development.\n\nOnce again, web development isn‚Äôt the only field in software development. However, there are compelling reasons why the community is head over heels for web development.\n\nBefore any other reason, it is just so easy for someone without a computer science background to be a successful web developer. By success, I mean gaining financial freedom, location freedom (remote working opportunities), and working without the bureaucratic clutter; to keep it short.\n\n![Web development](/images/web-development-your-friendly-entry-to-the-tech-community-in-2022/image-1.png)\n\n<figcaption>\n  Web development is a great entry point to the tech industry, offering\n  accessibility, high demand, financial freedom, remote work opportunities, and\n  a less bureaucratic work environment.\n</figcaption>\n\n## üóª High and rising demand\n\nThe first and most obvious reason is that the web is one of the most‚Äîif not the most‚Äîaccessible platforms in the world. A large and growing number of devices are gaining access to the internet. From watches to televisions to gaming consoles.\n\nAs a result, the web has the largest developer community. And the already high demand for web developers keeps rising.\n\nYou can start your journey knowing that the skills you are acquiring will be relevant for the foreseeable future.\n\n\n\n![High demand](/images/web-development-your-friendly-entry-to-the-tech-community-in-2022/image-2.png)\n\n## üöß Low barrier to entry\n\nHTML, CSS, and JavaScript are the technologies you need to build on the web. However, you don‚Äôt need to be the best Math student to write HTML, CSS, and JavaScript.\n\nHTML and CSS are ranked top among the easiest coding languages to learn. I believe the reason for this has to do with how fast you can build something meaningful with them.\n\nOn your first day of learning HTML and CSS, you can develop a functional (but not so pretty websiteü§≠).\n\nFor most coding languages, the difficulty arises when transferring theoretical knowledge to practical solutions. However, with HTML and CSS, the theory is the practice.\n\n![Low barrier](/images/web-development-your-friendly-entry-to-the-tech-community-in-2022/image-3.png)\n\n## üåä Opens you up to new earning opportunities\n\nWeb development skills provide you with numerous money-making opportunities. The most popular is taking a job in a company/agency. A lot of people succeed by taking this route.\n\nHowever, not everyone enjoys working for someone else. Some prefer to be the boss of themselves. If this sounds more like you, freelancing would be a choice for you. Although it‚Äôs not easy, there are great resources from other developers thriving as freelancers.\n\nYou can also earn by building solutions: primary or secondary.\n\nPrimary solutions solve problems for end-users directly; some examples are marketing websites, landing pages, and e-commerce sites (more advanced).\n\nSecondary solutions help other developers to build primary solutions faster: for example, HTML templates, design systems, plugins, and packages.\n\nHere‚Äôs a book on [Ten++ ways to make money as a developer](https://florinpop17.gumroad.com/l/makemoneydev) by Florin Pop.\n\n![Earning opportunities](/images/web-development-your-friendly-entry-to-the-tech-community-in-2022/image-4.png)\n\n## üåè Work from anywhere\n\nYou gain the freedom to work from anywhere across the globe when you equip yourself with web and software development skills in general. You can seize most of the opportunities mentioned above right from the comfort of your home.\n\nThe software development space is widely popular for the freedom it grants individuals.\n\nSeveral platforms connect you to remote opportunities. Some popular ones include LinkedIn and Indeed for full-time and part-time offers, Fiverr, and [Upwork](https://www.upwork.com/) for freelance gigs.\n\nIf you want to start your journey in web development, stay tuned for more posts. I write about the skills you need to succeed as a web developer.\n\nConnect with me as [@ammduncan](https://www.twitter.com/ammduncan) on Twitter to get notified when I release a new post.\n",
          "html": "<p>The tech field encompasses more than just software development. And there‚Äôs more to software development than web development. But why is everyone trying to teach you how to get into web development?</p>\n<p>If you‚Äôve paid the slightest attention to online tech communities, you would have noticed the trend of people sharing resources on how to get into web development.</p>\n<p>Once again, web development isn‚Äôt the only field in software development. However, there are compelling reasons why the community is head over heels for web development.</p>\n<p>Before any other reason, it is just so easy for someone without a computer science background to be a successful web developer. By success, I mean gaining financial freedom, location freedom (remote working opportunities), and working without the bureaucratic clutter; to keep it short.</p>\n<p><img src=\"/images/web-development-your-friendly-entry-to-the-tech-community-in-2022/image-1.png\" alt=\"Web development\"></p>\n<h2>üóª High and rising demand</h2>\n<p>The first and most obvious reason is that the web is one of the most‚Äîif not the most‚Äîaccessible platforms in the world. A large and growing number of devices are gaining access to the internet. From watches to televisions to gaming consoles.</p>\n<p>As a result, the web has the largest developer community. And the already high demand for web developers keeps rising.</p>\n<p>You can start your journey knowing that the skills you are acquiring will be relevant for the foreseeable future.</p>\n<p><img src=\"/images/web-development-your-friendly-entry-to-the-tech-community-in-2022/image-2.png\" alt=\"High demand\"></p>\n<h2>üöß Low barrier to entry</h2>\n<p>HTML, CSS, and JavaScript are the technologies you need to build on the web. However, you don‚Äôt need to be the best Math student to write HTML, CSS, and JavaScript.</p>\n<p>HTML and CSS are ranked top among the easiest coding languages to learn. I believe the reason for this has to do with how fast you can build something meaningful with them.</p>\n<p>On your first day of learning HTML and CSS, you can develop a functional (but not so pretty websiteü§≠).</p>\n<p>For most coding languages, the difficulty arises when transferring theoretical knowledge to practical solutions. However, with HTML and CSS, the theory is the practice.</p>\n<p><img src=\"/images/web-development-your-friendly-entry-to-the-tech-community-in-2022/image-3.png\" alt=\"Low barrier\"></p>\n<h2>üåä Opens you up to new earning opportunities</h2>\n<p>Web development skills provide you with numerous money-making opportunities. The most popular is taking a job in a company/agency. A lot of people succeed by taking this route.</p>\n<p>However, not everyone enjoys working for someone else. Some prefer to be the boss of themselves. If this sounds more like you, freelancing would be a choice for you. Although it‚Äôs not easy, there are great resources from other developers thriving as freelancers.</p>\n<p>You can also earn by building solutions: primary or secondary.</p>\n<p>Primary solutions solve problems for end-users directly; some examples are marketing websites, landing pages, and e-commerce sites (more advanced).</p>\n<p>Secondary solutions help other developers to build primary solutions faster: for example, HTML templates, design systems, plugins, and packages.</p>\n<p>Here‚Äôs a book on <a href=\"https://florinpop17.gumroad.com/l/makemoneydev\">Ten++ ways to make money as a developer</a> by Florin Pop.</p>\n<p><img src=\"/images/web-development-your-friendly-entry-to-the-tech-community-in-2022/image-4.png\" alt=\"Earning opportunities\"></p>\n<h2>üåè Work from anywhere</h2>\n<p>You gain the freedom to work from anywhere across the globe when you equip yourself with web and software development skills in general. You can seize most of the opportunities mentioned above right from the comfort of your home.</p>\n<p>The software development space is widely popular for the freedom it grants individuals.</p>\n<p>Several platforms connect you to remote opportunities. Some popular ones include LinkedIn and Indeed for full-time and part-time offers, Fiverr, and <a href=\"https://www.upwork.com/\">Upwork</a> for freelance gigs.</p>\n<p>If you want to start your journey in web development, stay tuned for more posts. I write about the skills you need to succeed as a web developer.</p>\n<p>Connect with me as <a href=\"https://www.twitter.com/ammduncan\">@ammduncan</a> on Twitter to get notified when I release a new post.</p>"
        },
        "_id": "web-development-your-friendly-entry-to-the-tech-community-in-2022.mdx",
        "_raw": {
          "sourceFilePath": "web-development-your-friendly-entry-to-the-tech-community-in-2022.mdx",
          "sourceFileName": "web-development-your-friendly-entry-to-the-tech-community-in-2022.mdx",
          "sourceFileDir": ".",
          "contentType": "mdx",
          "flattenedPath": "web-development-your-friendly-entry-to-the-tech-community-in-2022"
        },
        "type": "Post",
        "slug": "web-development-your-friendly-entry-to-the-tech-community-in-2022",
        "reading_time": 3
      },
      "documentHash": "1745872553414",
      "hasWarnings": false,
      "documentTypeName": "Post"
    }
  }
}
