{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from '@contentlayer/source-files';\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `**/*.{md,mdx}`,\n  fields: {\n    title: { type: 'string', required: true },\n    author: { type: 'string', required: true },\n    created_at: { type: 'date', required: true },\n    primary_tag: { type: 'string', required: true },\n    featured: { type: 'boolean' },\n    feature_image: { type: 'string', required: true },\n    feature_dark_mode_image: { type: 'string', required: false },\n    tags: { type: 'list', of: { type: 'string' }, required: true },\n  },\n  computedFields: {\n    // url: { type: 'string', resolve: (post) => `/change-logs/${post._raw.flattenedPath}` },\n    slug: { type: 'string', resolve: (post) => post._raw.flattenedPath },\n    reading_time: {\n      type: 'number',\n      resolve: (post) =>\n        calculateReadingTimeMarkdown(post.body.html).estimatedTime,\n    },\n  },\n}));\n\nfunction calculateReadingTimeMarkdown(markdownText: string, wpm = 225) {\n  // 1. Preprocess the text (similar to JavaScript example)\n  const text = markdownText\n    .trim()\n    .replace(/<[^>]+>/g, ' ') // Remove markdown formatting\n    .split(/\\s+/);\n\n  // 2. Count words\n  const wordCount = text.length;\n\n  // 3. Calculate estimated time\n  const estimatedTime = Math.ceil(wordCount / wpm);\n\n  return { wordCount, estimatedTime };\n}\n\nexport default makeSource({\n  contentDirPath: 'posts',\n  documentTypes: [Post],\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAExC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,YAAY,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC3C,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,UAAU,EAAE,MAAM,UAAU;AAAA,IAC5B,eAAe,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAChD,yBAAyB,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC3D,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,EAC/D;AAAA,EACA,gBAAgB;AAAA;AAAA,IAEd,MAAM,EAAE,MAAM,UAAU,SAAS,CAAC,SAAS,KAAK,KAAK,cAAc;AAAA,IACnE,cAAc;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,CAAC,SACR,6BAA6B,KAAK,KAAK,IAAI,EAAE;AAAA,IACjD;AAAA,EACF;AACF,EAAE;AAEF,SAAS,6BAA6B,cAAsB,MAAM,KAAK;AAErE,QAAM,OAAO,aACV,KAAK,EACL,QAAQ,YAAY,GAAG,EACvB,MAAM,KAAK;AAGd,QAAM,YAAY,KAAK;AAGvB,QAAM,gBAAgB,KAAK,KAAK,YAAY,GAAG;AAE/C,SAAO,EAAE,WAAW,cAAc;AACpC;AAEA,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AACtB,CAAC;",
  "names": []
}
