{
  "title": "3+ JavaScript String methods you‚Äôll use often and where you‚Äôll need them.",
  "author": "Ammiel Yawson",
  "created_at": "2022-01-24T00:00:00.000Z",
  "primary_tag": "JavaScript",
  "featured": true,
  "feature_image": "/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/featured.webp",
  "tags": [
    "JavaScript",
    "Web Development"
  ],
  "body": {
    "raw": "\nAs a web developer‚Äîfrontend or backend‚Äîstrings make up the most significant portion of the data you deal with commonly.\n\nSometimes, you use the string values as they are. Other times, you need a modified version of the string. Hence, one of the things you do most is String Manipulation.\n\nFrom my own experience, as a frontend developer, there are several string methods that I use most often. I believe these methods would benefit anyone in the field.\n\nWe‚Äôll take a walk through the process of building a search feature on a website. And in the process, highlight these string methods and some situations that call for them.\n\n![Image of Burger Prince Menu](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/burger-prince-menu.png)\n\n## üëë Burger Prince\n\nBurger Prince is a fictional Burger Franchise. They contacted us to add a search feature to their website.\n\nSince this post‚Äôs main aim is string methods, we will not worry about the implementation details.\n\nExtracting just the names from the menu, we get something like this.\n\n```js\nconst mainList = [\n  'Hamburger Gold',\n  'Hamburger Bronze',\n  'Beef Burger',\n  'Turkey Burgey',\n];\n```\n\nTo avoid disrupting other features that rely on the menu list, we will not modify the list directly. However, we will make a new list of the items that match the keywords entered by the user.\n\nTo do that, we‚Äôll go through the list and check if the item contains the keyword(s) entered by the user. If it does, we add it to the new list. We use modern array methods to loop through the list; topic for another time.\n\n![Search bar with hamburger and space](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/search-with-hamburger-and-space.png)\n\n## ü™£ includes()\n\nTo check if an item contains the keyword entered by the user, we use the includes method available on all JavaScript String objects. So the code would look like this;\n\nconst newList = mainList.filter((item) => {\nreturn item.includes(keyword)\n})\n\nAssuming a user enters the string ‚Äú hamburger ‚Äú; how many items do you think will be in the new list?\n\nZERO.\n\nIf you‚Äôre wondering why it‚Äôs not two, I‚Äôll tell you why. Notice the capital ‚ÄúH‚Äù in Hamburger Gold and Hamburger Bronze? The includes method is case sensitive: meaning h is not equal to H.\n\nSo how solve this problem?\n\n## üî§ toLowerCase() and toUpperCase()\n\nYou can compare the all-lowercase version of the item in the main list to the all-lowercase version of the search keyword. The code would now look like this.\n\nconst newList = mainList.filter((item) => {\nconst itemInLowercase = item.toLowerCase();\nconst keywordInLowercase = keyword.toLowerCase();\nreturn itemInLowercase.includes(keywordInLowercase);\n})\n\nHow many items should the new list have if the search keyword remains unchanged?\n\nZERO AGAIN.\n\n## ‚úÇÔ∏è trim()\n\nNotice the spaces between the quotation marks and hamburger in the search value? The menu items contain ‚ÄúHamburger‚Äù with no space before the letter H; Hence, none of the items in the main list match the keyword.\n\n![Search with spaces labelled](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/search-with-spaces-labelled.png)\n\nThe trim method in JavaScript removes white spaces from the beginning and end of a string if any exists.\n\nWe can use the trim method to remove the white spaces from the start and end of the search value. The result would be ‚Äúhamburger‚Äù: with no spaces surrounding it.\n\n```js\nconst newList = mainList.filter((item) => {\n  const itemInLowercase = item.toLowerCase();\n  const keywordInLowercase = keyword.toLowerCase();\n  const trimmedKeyword = keywordInLowercase.trim();\n  return itemInLowercase.includes(trimmedKeyword);\n});\n```\n\nThe keyword now matches two items in the main list: Hamburger Gold and Hamburger Bronze.\n\nThat‚Äôs all for the methods we will use to build the search feature for üëë Burger Prince.\n\n---\n\nTwo other JavaScript string methods that will bring you massive value are the slice and replaceAll methods.\n\n## üç∞ slice(startIndex, [endIndex])\n\nSlice \"extracts a section of a string and returns it as a new string, without modifying the original string.\" - MDN Docs.\n\nIt takes two parameters: startIndex and endIndex (optional).\n\nIt returns a string with characters starting from the startIndex to (but not including) the endIndex. When given only the startIndex, slice returns a string with characters from the startIndex to the end of the string.\n\n![Slice method use with monday](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/slice-monday.png)\n\nFor example, you receive a string: monday. And you would like to capitalize it before displaying it on your website. The code would like this.\n\n```js\nconst word = 'monday';\n\nconst firstLetter = word.slice(0, 1);\nconst restOfWord = word.slice(1);\nconst capitalFirst = firstLetter.toUpperCase();\n\nconst capitalizedWord = capitalFirst + restOfWord;\n```\n\n## üé≠ replaceAll(pattern, replacement)\n\nThe replaceAll method takes two parameters: pattern and replacement. It ‚Äúreturns a new string with all matches of a pattern replaced by a replacement\" - MDN Docs.\n\nA situation where you will need to employ this method is;\n\nYou scraped the price of the F150 Raptor from the Ford website and you need to calculate how much that would be in your local currency. The value you got back is ‚Äú$65,375‚Äù.\n\nYou can use the slice method to get the price without the currency: \"65,375\".\n\nYou will run into a problem when converting this value to a number. There are various ways to convert a string to a number in JavaScript, and this is how they would all fail the task.\n\n![Amount to number](/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/amount-to-number.png)\n\nThe issue here is the comma in the string. To solve this issue, we can use the replaceAll method to find and replace all the occurrences of a comma in the value with an empty string.\n\nYou end up with a clean string, ready to be converted; \"65375\". You can use any of the methods above to convert.\n\nThe aim of is this post was to bring these methods to your attention. So if any of them seemed unclear, look them up in the MDN docs for a detailed usage guide.\n\nIf you want to start your journey in web development, stay tuned for more posts. I write about the skills you need to succeed as a web developer.\n\nLet me know your thoughts.\n\nTwitter: [@ammduncan](https://www.twitter.com/ammduncan)\n\nLinkedIn: [Ammiel Yawson](https://www.linkedin.com/in/ammiel-yawson-098902124/)\n",
    "html": "<p>As a web developer‚Äîfrontend or backend‚Äîstrings make up the most significant portion of the data you deal with commonly.</p>\n<p>Sometimes, you use the string values as they are. Other times, you need a modified version of the string. Hence, one of the things you do most is String Manipulation.</p>\n<p>From my own experience, as a frontend developer, there are several string methods that I use most often. I believe these methods would benefit anyone in the field.</p>\n<p>We‚Äôll take a walk through the process of building a search feature on a website. And in the process, highlight these string methods and some situations that call for them.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/burger-prince-menu.png\" alt=\"Image of Burger Prince Menu\"></p>\n<h2>üëë Burger Prince</h2>\n<p>Burger Prince is a fictional Burger Franchise. They contacted us to add a search feature to their website.</p>\n<p>Since this post‚Äôs main aim is string methods, we will not worry about the implementation details.</p>\n<p>Extracting just the names from the menu, we get something like this.</p>\n<pre><code class=\"language-js\">const mainList = [\n  'Hamburger Gold',\n  'Hamburger Bronze',\n  'Beef Burger',\n  'Turkey Burgey',\n];\n</code></pre>\n<p>To avoid disrupting other features that rely on the menu list, we will not modify the list directly. However, we will make a new list of the items that match the keywords entered by the user.</p>\n<p>To do that, we‚Äôll go through the list and check if the item contains the keyword(s) entered by the user. If it does, we add it to the new list. We use modern array methods to loop through the list; topic for another time.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/search-with-hamburger-and-space.png\" alt=\"Search bar with hamburger and space\"></p>\n<h2>ü™£ includes()</h2>\n<p>To check if an item contains the keyword entered by the user, we use the includes method available on all JavaScript String objects. So the code would look like this;</p>\n<p>const newList = mainList.filter((item) => {\nreturn item.includes(keyword)\n})</p>\n<p>Assuming a user enters the string ‚Äú hamburger ‚Äú; how many items do you think will be in the new list?</p>\n<p>ZERO.</p>\n<p>If you‚Äôre wondering why it‚Äôs not two, I‚Äôll tell you why. Notice the capital ‚ÄúH‚Äù in Hamburger Gold and Hamburger Bronze? The includes method is case sensitive: meaning h is not equal to H.</p>\n<p>So how solve this problem?</p>\n<h2>üî§ toLowerCase() and toUpperCase()</h2>\n<p>You can compare the all-lowercase version of the item in the main list to the all-lowercase version of the search keyword. The code would now look like this.</p>\n<p>const newList = mainList.filter((item) => {\nconst itemInLowercase = item.toLowerCase();\nconst keywordInLowercase = keyword.toLowerCase();\nreturn itemInLowercase.includes(keywordInLowercase);\n})</p>\n<p>How many items should the new list have if the search keyword remains unchanged?</p>\n<p>ZERO AGAIN.</p>\n<h2>‚úÇÔ∏è trim()</h2>\n<p>Notice the spaces between the quotation marks and hamburger in the search value? The menu items contain ‚ÄúHamburger‚Äù with no space before the letter H; Hence, none of the items in the main list match the keyword.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/search-with-spaces-labelled.png\" alt=\"Search with spaces labelled\"></p>\n<p>The trim method in JavaScript removes white spaces from the beginning and end of a string if any exists.</p>\n<p>We can use the trim method to remove the white spaces from the start and end of the search value. The result would be ‚Äúhamburger‚Äù: with no spaces surrounding it.</p>\n<pre><code class=\"language-js\">const newList = mainList.filter((item) => {\n  const itemInLowercase = item.toLowerCase();\n  const keywordInLowercase = keyword.toLowerCase();\n  const trimmedKeyword = keywordInLowercase.trim();\n  return itemInLowercase.includes(trimmedKeyword);\n});\n</code></pre>\n<p>The keyword now matches two items in the main list: Hamburger Gold and Hamburger Bronze.</p>\n<p>That‚Äôs all for the methods we will use to build the search feature for üëë Burger Prince.</p>\n<hr>\n<p>Two other JavaScript string methods that will bring you massive value are the slice and replaceAll methods.</p>\n<h2>üç∞ slice(startIndex, [endIndex])</h2>\n<p>Slice \"extracts a section of a string and returns it as a new string, without modifying the original string.\" - MDN Docs.</p>\n<p>It takes two parameters: startIndex and endIndex (optional).</p>\n<p>It returns a string with characters starting from the startIndex to (but not including) the endIndex. When given only the startIndex, slice returns a string with characters from the startIndex to the end of the string.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/slice-monday.png\" alt=\"Slice method use with monday\"></p>\n<p>For example, you receive a string: monday. And you would like to capitalize it before displaying it on your website. The code would like this.</p>\n<pre><code class=\"language-js\">const word = 'monday';\n\nconst firstLetter = word.slice(0, 1);\nconst restOfWord = word.slice(1);\nconst capitalFirst = firstLetter.toUpperCase();\n\nconst capitalizedWord = capitalFirst + restOfWord;\n</code></pre>\n<h2>üé≠ replaceAll(pattern, replacement)</h2>\n<p>The replaceAll method takes two parameters: pattern and replacement. It ‚Äúreturns a new string with all matches of a pattern replaced by a replacement\" - MDN Docs.</p>\n<p>A situation where you will need to employ this method is;</p>\n<p>You scraped the price of the F150 Raptor from the Ford website and you need to calculate how much that would be in your local currency. The value you got back is ‚Äú$65,375‚Äù.</p>\n<p>You can use the slice method to get the price without the currency: \"65,375\".</p>\n<p>You will run into a problem when converting this value to a number. There are various ways to convert a string to a number in JavaScript, and this is how they would all fail the task.</p>\n<p><img src=\"/images/3-javascript-string-methods-youll-use-often-and-where-youll-need-them/amount-to-number.png\" alt=\"Amount to number\"></p>\n<p>The issue here is the comma in the string. To solve this issue, we can use the replaceAll method to find and replace all the occurrences of a comma in the value with an empty string.</p>\n<p>You end up with a clean string, ready to be converted; \"65375\". You can use any of the methods above to convert.</p>\n<p>The aim of is this post was to bring these methods to your attention. So if any of them seemed unclear, look them up in the MDN docs for a detailed usage guide.</p>\n<p>If you want to start your journey in web development, stay tuned for more posts. I write about the skills you need to succeed as a web developer.</p>\n<p>Let me know your thoughts.</p>\n<p>Twitter: <a href=\"https://www.twitter.com/ammduncan\">@ammduncan</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/ammiel-yawson-098902124/\">Ammiel Yawson</a></p>"
  },
  "_id": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them.mdx",
  "_raw": {
    "sourceFilePath": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them.mdx",
    "sourceFileName": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them"
  },
  "type": "Post",
  "slug": "3-javascript-string-methods-youll-use-often-and-where-youll-need-them",
  "reading_time": 5
}