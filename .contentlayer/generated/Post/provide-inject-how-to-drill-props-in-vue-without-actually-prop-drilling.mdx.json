{
  "title": "Provide / Inject - How to drill props in Vue without actually prop drilling",
  "author": "Ammiel Yawson",
  "created_at": "2022-09-22T00:00:00.000Z",
  "primary_tag": "Vue",
  "featured": true,
  "feature_image": "/images/provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling/featured.webp",
  "tags": [
    "Vue",
    "Web Development"
  ],
  "body": {
    "raw": "\n## What is prop drilling?\n\nProp drilling is a term used in component-driven frontend development where a parent component sends props through child components that have no use for the props except to pass them down to be used by a deeply nested component.\n\n## Example\n\nYou’re building a Vue web application where the buttons have a blue background and white colored text. There’s one exception though. The button has a red background when used anywhere inside a modal.\n\n![Labelled Illustration](/images/provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling/labelled-illustration.png)\n\nTo know when to change the color to red, the Button takes a prop, `inModal`; a boolean value.\n\n```js\n// ButtonComponent.vue\nexport default {\n\t// ...\n\tprops: [ \"inModal\" ]\n}\n\n```\n\nTo pass the prop to the button in the Modal, we need to pass the prop to the Card component first. Which then passes the prop to the Button.\n\nNow, for a two-step drill like this, there’s no pain in drilling the prop. Imagine the Card component was nested in other components inside the Modal component; `CardListComponent`  → `CartContentComponent` → `CartComponent`, etc. Then passing the inModal props through each of these in-between components would be a pain.\n\nTo battle the need to pass the props through components that have no use for them, Vue provides the Provide / Inject feature. It involves a parent component exposing labeled values, and making them accessible to every child, grandchild, or even great-grandchild component.\n\nHere’s how you can use the Provide / Inject feature to eliminate prop drilling in our example.\n\n```js\n// ModalComponent.vue\nexport default {\n\t// ...\n\tprovide: { inModal: true }\n}\n```\n\n```js\n// ButtonComponent.vue\nexport default {\n\t// ...\n\tinject: [ \"inModal\" ]\n}\n```\n\nSo the ModalComponent says, assign the value true to the label inModal and make it available to all descendants. The ButtonComponent says, inject whatever value my ancestors labeled inModal.\n\nIf no ancestor of Button provides a value with the label inModal, you’ll see a warning in your console.\n\n```text\n[Vue warn]: injection \"inModal\" not found.\n```\n\n## [Optional] Alternate Provide Syntax\nWhen provide is set to an object, you can provide only static values to the nested components. However, you write provide as a method that returns an object when you need to make a reactive value available. In the method, you can access the this keyword; assuming you’re using the options API.\n\nProvide / Inject can help you avoid prop drilling and write cleaner component compositions as a result. You can check the [official docs](https://vuejs.org/guide/components/provide-inject.html#prop-drilling) for more information or clarification if you need any.",
    "html": "<h2>What is prop drilling?</h2>\n<p>Prop drilling is a term used in component-driven frontend development where a parent component sends props through child components that have no use for the props except to pass them down to be used by a deeply nested component.</p>\n<h2>Example</h2>\n<p>You’re building a Vue web application where the buttons have a blue background and white colored text. There’s one exception though. The button has a red background when used anywhere inside a modal.</p>\n<p><img src=\"/images/provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling/labelled-illustration.png\" alt=\"Labelled Illustration\"></p>\n<p>To know when to change the color to red, the Button takes a prop, <code>inModal</code>; a boolean value.</p>\n<pre><code class=\"language-js\">// ButtonComponent.vue\nexport default {\n\t// ...\n\tprops: [ \"inModal\" ]\n}\n\n</code></pre>\n<p>To pass the prop to the button in the Modal, we need to pass the prop to the Card component first. Which then passes the prop to the Button.</p>\n<p>Now, for a two-step drill like this, there’s no pain in drilling the prop. Imagine the Card component was nested in other components inside the Modal component; <code>CardListComponent</code>  → <code>CartContentComponent</code> → <code>CartComponent</code>, etc. Then passing the inModal props through each of these in-between components would be a pain.</p>\n<p>To battle the need to pass the props through components that have no use for them, Vue provides the Provide / Inject feature. It involves a parent component exposing labeled values, and making them accessible to every child, grandchild, or even great-grandchild component.</p>\n<p>Here’s how you can use the Provide / Inject feature to eliminate prop drilling in our example.</p>\n<pre><code class=\"language-js\">// ModalComponent.vue\nexport default {\n\t// ...\n\tprovide: { inModal: true }\n}\n</code></pre>\n<pre><code class=\"language-js\">// ButtonComponent.vue\nexport default {\n\t// ...\n\tinject: [ \"inModal\" ]\n}\n</code></pre>\n<p>So the ModalComponent says, assign the value true to the label inModal and make it available to all descendants. The ButtonComponent says, inject whatever value my ancestors labeled inModal.</p>\n<p>If no ancestor of Button provides a value with the label inModal, you’ll see a warning in your console.</p>\n<pre><code class=\"language-text\">[Vue warn]: injection \"inModal\" not found.\n</code></pre>\n<h2>[Optional] Alternate Provide Syntax</h2>\n<p>When provide is set to an object, you can provide only static values to the nested components. However, you write provide as a method that returns an object when you need to make a reactive value available. In the method, you can access the this keyword; assuming you’re using the options API.</p>\n<p>Provide / Inject can help you avoid prop drilling and write cleaner component compositions as a result. You can check the <a href=\"https://vuejs.org/guide/components/provide-inject.html#prop-drilling\">official docs</a> for more information or clarification if you need any.</p>"
  },
  "_id": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling.mdx",
  "_raw": {
    "sourceFilePath": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling.mdx",
    "sourceFileName": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling"
  },
  "type": "Post",
  "slug": "provide-inject-how-to-drill-props-in-vue-without-actually-prop-drilling",
  "reading_time": 2
}